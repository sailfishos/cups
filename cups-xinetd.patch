Lisa Yue modified the patch for v1.4.4

From: Yan Li <yan.i.li@intel.com>
Date: Thu, 29 Apr 2010
Subject: starts cups on-demand, using xinetd

Based on Bill Nottingham <notting@redhat.com>'s patch retrieved from
https://bugzilla.redhat.com/show_bug.cgi?id=480668 at 29 Apr
2010. Ported to cups 1.4.2 for MeeGo by Yan Li.

MBC#363

diff --git a/scheduler/conf.c b/scheduler/conf.c
index dffff6d..f59d601 100644
--- a/scheduler/conf.c
+++ b/scheduler/conf.c
@@ -122,6 +122,7 @@ static const cupsd_var_t	variables[] =
   { "FilterNice",		&FilterNice,		CUPSD_VARTYPE_INTEGER },
   { "FontPath",			&FontPath,		CUPSD_VARTYPE_STRING },
   { "HideImplicitMembers",	&HideImplicitMembers,	CUPSD_VARTYPE_BOOLEAN },
+  { "IdleTimeout",              &IdleTimeout,           CUPSD_VARTYPE_INTEGER },
   { "ImplicitClasses",		&ImplicitClasses,	CUPSD_VARTYPE_BOOLEAN },
   { "ImplicitAnyClasses",	&ImplicitAnyClasses,	CUPSD_VARTYPE_BOOLEAN },
   { "JobKillDelay",		&JobKillDelay,		CUPSD_VARTYPE_INTEGER },
@@ -130,7 +131,7 @@ static const cupsd_var_t	variables[] =
   { "KeepAliveTimeout",		&KeepAliveTimeout,	CUPSD_VARTYPE_INTEGER },
   { "KeepAlive",		&KeepAlive,		CUPSD_VARTYPE_BOOLEAN },
 #ifdef HAVE_LAUNCHD
-  { "LaunchdTimeout",		&LaunchdTimeout,	CUPSD_VARTYPE_INTEGER },
+  { "LaunchdTimeout",		&IdleTimeout,	        CUPSD_VARTYPE_INTEGER },
 #endif /* HAVE_LAUNCHD */
   { "LimitRequestBody",		&MaxRequestSize,	CUPSD_VARTYPE_INTEGER },
   { "ListenBackLog",		&ListenBackLog,		CUPSD_VARTYPE_INTEGER },
@@ -686,8 +687,8 @@ cupsdReadConfiguration(void)
   DefaultLeaseDuration       = 86400;
   MaxLeaseDuration           = 0;
 
+  IdleTimeout = DEFAULT_TIMEOUT + 10;
 #ifdef HAVE_LAUNCHD
-  LaunchdTimeout = DEFAULT_TIMEOUT + 10;
 #endif /* HAVE_LAUNCHD */
 
 #ifdef __APPLE__
diff --git a/scheduler/conf.h b/scheduler/conf.h
index 9161441..859e0bb 100644
--- a/scheduler/conf.h
+++ b/scheduler/conf.h
@@ -247,9 +247,9 @@ VAR int			SSLOptions		VALUE(CUPSD_SSL_NONE);
 					/* SSL/TLS options */
 #endif /* HAVE_SSL */
 
-#ifdef HAVE_LAUNCHD
-VAR int			LaunchdTimeout		VALUE(DEFAULT_KEEPALIVE);
+VAR int			IdleTimeout		VALUE(DEFAULT_KEEPALIVE);
 					/* Time after which an idle cupsd will exit */
+#ifdef HAVE_LAUNCHD
 #endif /* HAVE_LAUNCHD */
 
 #ifdef __APPLE__
diff --git a/scheduler/cupsd.h b/scheduler/cupsd.h
index b8f5c84..b02e9a3 100644
--- a/scheduler/cupsd.h
+++ b/scheduler/cupsd.h
@@ -140,6 +140,12 @@ extern const char *cups_hstrerror(int);
 #define RELOAD_ALL	1		/* Reload everything */
 #define RELOAD_CUPSD	2		/* Reload only cupsd.conf */
 
+/* Ondemand types ...
+ *
+ */
+#define ONDEMAND_NONE     0             /* Not started ondemand */
+#define ONDEMAND_LAUNCHD  1             /* Started by launchd */
+#define ONDEMAND_XINETD   2             /* Started by xinetd */
 
 /*
  * Select callback function type...
@@ -173,10 +179,8 @@ VAR krb5_context	KerberosContext VALUE(NULL);
 					/* Kerberos context for credentials */
 #endif /* HAVE_GSSAPI */
 
-#ifdef HAVE_LAUNCH_H
-VAR int			Launchd		VALUE(0);
-					/* Running from launchd */
-#endif /* HAVE_LAUNCH_H */
+VAR int                 ondemand        VALUE(ONDEMAND_NONE);
+                                        /* Running from xinetd or launchd */
 
 #if defined(__APPLE__) && defined(HAVE_DLFCN_H)
 typedef int (*PSQUpdateQuotaProcPtr)(const char *printer, const char *info, 
diff --git a/scheduler/main.c b/scheduler/main.c
index 61fc93b..aac479a 100644
--- a/scheduler/main.c
+++ b/scheduler/main.c
@@ -81,6 +81,7 @@
  * Local functions...
  */
 
+static void		xinetd_checkin(void);
 static void		cupsd_clean_files(const char *path,
 			                  const char *pattern);
 #ifdef HAVE_LAUNCHD
@@ -157,10 +158,7 @@ main(int  argc,				/* I - Number of command-line args */
 #else
   time_t		netif_time = 0;	/* Time since last network update */
 #endif /* __APPLE__ */
-#if HAVE_LAUNCHD
-  int			launchd_idle_exit;
-					/* Idle exit on select timeout? */
-#endif	/* HAVE_LAUNCHD */
+  int			idle_exit;
 
 
 #ifdef HAVE_GETEUID
@@ -181,10 +179,15 @@ main(int  argc,				/* I - Number of command-line args */
 
   fg = 0;
 
+  if (getenv("CUPSD_XINETD"))
+  {
+    ondemand = ONDEMAND_XINETD;
+    fg	   = 1;
+  }
 #ifdef HAVE_LAUNCHD
   if (getenv("CUPSD_LAUNCHD"))
   {
-    Launchd = 1;
+    ondemand = ONDEMAND_LAUNCHD;
     fg      = 1;
   }
 #endif /* HAVE_LAUNCHD */
@@ -265,7 +268,7 @@ main(int  argc,				/* I - Number of command-line args */
 
           case 'l' : /* Started by launchd... */
 #ifdef HAVE_LAUNCHD
-	      Launchd = 1;
+	      ondemand = ONDEMAND_LAUNCHD;
 	      fg      = 1;
 #else
 	      _cupsLangPuts(stderr, _("cupsd: launchd(8) support not compiled "
@@ -299,6 +302,10 @@ main(int  argc,				/* I - Number of command-line args */
 	      TestConfigFile = 1;
 	      fg             = 1;
 	      break;
+          case 'x' : /* Started by xinetd */
+              ondemand = ONDEMAND_XINETD;
+              fg       = 1;
+              break;
 
 	  default : /* Unknown option */
               _cupsLangPrintf(stderr, _("cupsd: Unknown option \"%c\" - "
@@ -522,8 +529,16 @@ main(int  argc,				/* I - Number of command-line args */
 
   cupsd_clean_files(CacheDir, "*.ipp");
 
+  if (ondemand == ONDEMAND_XINETD)
+  {
+   /*
+    * If we were started by xinetd get the listen sockets file descriptors...
+    */
+
+    xinetd_checkin();
+  }
 #if HAVE_LAUNCHD
-  if (Launchd)
+  if (ondemand == ONDEMAND_LAUNCHD)
   {
    /*
     * If we were started by launchd get the listen sockets file descriptors...
@@ -651,9 +666,12 @@ main(int  argc,				/* I - Number of command-line args */
  /*
   * Send server-started event...
   */
-
+  if (ondemand == ONDEMAND_XINETD)
+    cupsdAddEvent(CUPSD_EVENT_SERVER_STARTED, NULL, NULL,
+                  "Scheduler started via xinetd.");
+  else
 #ifdef HAVE_LAUNCHD
-  if (Launchd)
+  if (ondemand == ONDEMAND_LAUNCHD)
     cupsdAddEvent(CUPSD_EVENT_SERVER_STARTED, NULL, NULL,
                   "Scheduler started via launchd.");
   else
@@ -740,9 +758,17 @@ main(int  argc,				/* I - Number of command-line args */
 		 ConfigurationFile);
           break;
 	}
+	if (ondemand == ONDEMAND_XINETD)
+	{
+	 /*
+	  * If we were started by xinetd get the listen sockets file descriptors...
+	  */
+
+	  xinetd_checkin();
+	}
 
 #if HAVE_LAUNCHD
-	if (Launchd)
+	if (ondemand == ONDEMAND_LAUNCHD)
 	{
 	 /*
 	  * If we were started by launchd, get the listen socket file
@@ -781,26 +807,24 @@ main(int  argc,				/* I - Number of command-line args */
     if ((timeout = select_timeout(fds)) > 1 && LastEvent)
       timeout = 1;
 
-#if HAVE_LAUNCHD
    /*
     * If no other work is scheduled and we're being controlled by
-    * launchd then timeout after 'LaunchdTimeout' seconds of
+    * launchd then timeout after 'IdleTimeout' seconds of
     * inactivity...
     */
 
-    if (timeout == 86400 && Launchd && LaunchdTimeout && !NumPolled &&
-        !cupsArrayCount(ActiveJobs) &&
+    if (timeout == 86400 && ondemand != ONDEMAND_NONE && IdleTimeout &&
+        !NumPolled && !cupsArrayCount(ActiveJobs) &&
 	(!Browsing ||
 	 (!BrowseRemoteProtocols &&
 	  (!NumBrowsers || !BrowseLocalProtocols ||
 	   cupsArrayCount(Printers) == 0))))
     {
-      timeout		= LaunchdTimeout;
-      launchd_idle_exit = 1;
+      timeout		= IdleTimeout;
+      idle_exit = 1;
     }
     else
-      launchd_idle_exit = 0;
-#endif	/* HAVE_LAUNCHD */
+      idle_exit = 0;
 
     if ((fds = cupsdDoSelect(timeout)) < 0)
     {
@@ -899,13 +923,12 @@ main(int  argc,				/* I - Number of command-line args */
     }
 #endif /* !__APPLE__ */
 
-#if HAVE_LAUNCHD
    /*
     * If no other work was scheduled and we're being controlled by launchd
-    * then timeout after 'LaunchdTimeout' seconds of inactivity...
+    * then timeout after 'IdleTimeout' seconds of inactivity...
     */
 
-    if (!fds && launchd_idle_exit)
+    if (!fds && idle_exit)
     {
       cupsdLogMessage(CUPSD_LOG_INFO,
                       "Printer sharing is off and there are no jobs pending, "
@@ -913,7 +936,6 @@ main(int  argc,				/* I - Number of command-line args */
       stop_scheduler = 1;
       break;
     }
-#endif /* HAVE_LAUNCHD */
 
    /*
     * Resume listening for new connections as needed...
@@ -1419,6 +1441,95 @@ cupsdSetStringf(char       **s,		/* O - New string */
     _cupsStrFree(olds);
 }
 
+static void
+xinetd_checkin(void)
+{
+  int			portnum;	/* Port number */
+  cupsd_listener_t	*lis;		/* Listeners array */
+  http_addr_t		addr;		/* Address variable */
+  socklen_t		addrlen;	/* Length of address */
+  int			fd;		/* File descriptor */
+  char			s[256];		/* String addresss */
+
+  cupsdLogMessage(CUPSD_LOG_INFO, "xinetd_checkin: pid=%d", (int)getpid());
+ /*
+  * xinetd passes the socket on stdin/stdout/stderr.
+  * Set stdout/stderr to something more sensible.
+  */
+  fd = open("/dev/null", O_RDWR);
+  dup2(fd, 1);
+  dup2(fd, 2);
+  close(fd);
+ /*
+  * Get the socket
+  */
+
+  fd = 0;
+  addrlen = sizeof(addr);
+  if (getsockname(fd, (struct sockaddr *)&addr, &addrlen))
+  {
+    cupsdLogMessage(CUPSD_LOG_ERROR,
+                    "xinetd_checkin: Unable to get local address - %s",
+                    strerror(errno));
+    return;
+  }
+
+ /*
+  * Try to match the xinetd socket address to one of the listeners...
+  */
+
+  for (lis = (cupsd_listener_t *)cupsArrayFirst(Listeners);
+       lis;
+       lis = (cupsd_listener_t *)cupsArrayNext(Listeners))
+    if (httpAddrEqual(&lis->address, &addr))
+       break;
+
+ /*
+  * Add a new listener If there's no match...
+  */
+
+  if (lis)
+  {
+    cupsdLogMessage(CUPSD_LOG_INFO,
+                    "xinetd_checkin: Matched existing listener %s with fd %d...",
+		    httpAddrString(&(lis->address), s, sizeof(s)), fd);
+  }
+  else
+  {
+    cupsdLogMessage(CUPSD_LOG_INFO,
+                    "xinetd_checkin: Adding new listener %s with fd %d...",
+		    httpAddrString(&addr, s, sizeof(s)), fd);
+
+    if ((lis = calloc(1, sizeof(cupsd_listener_t))) == NULL)
+    {
+      cupsdLogMessage(CUPSD_LOG_ERROR,
+                      "xinetd_checkin: Unable to allocate listener - %s.",
+                      strerror(errno));
+      exit(EXIT_FAILURE);
+    }
+
+    cupsArrayAdd(Listeners, lis);
+
+    memcpy(&lis->address, &addr, sizeof(lis->address));
+  }
+
+  lis->fd = fd;
+
+#  ifdef HAVE_SSL
+  portnum = 0;
+
+#    ifdef AF_INET6
+  if (lis->address.addr.sa_family == AF_INET6)
+    portnum = ntohs(lis->address.ipv6.sin6_port);
+  else
+#    endif /* AF_INET6 */
+  if (lis->address.addr.sa_family == AF_INET)
+    portnum = ntohs(lis->address.ipv4.sin_port);
+
+  if (portnum == 443)
+    lis->encryption = HTTP_ENCRYPT_ALWAYS;
+#  endif /* HAVE_SSL */
+}
 
 /*
  * 'cupsd_clean_files()' - Clean out old files.
@@ -2191,7 +2302,8 @@ usage(int status)			/* O - Exit status */
 		  "-f                  Run in the foreground\n"
 		  "-F                  Run in the foreground but detach\n"
 		  "-h                  Show this usage message\n"
-		  "-l                  Run cupsd from launchd(8)\n"));
+		  "-l                  Run cupsd from launchd(8)\n"
+		  "-x                  Run cupsd from xinetd(8)\n"));
   exit(status);
 }
 
